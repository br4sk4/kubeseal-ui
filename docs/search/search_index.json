{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>A web frontend for Sealed Secrets by Bitnami</p>"},{"location":"#what-is-kubeseal-ui","title":"What is KubeSeal UI?","text":"<p>Kubeseal UI is a web interface for Sealed Secrets by Bitnami. Sealed Secrets lets you manage your K8s secrets in git by encrypting/sealing your Secrets and decrypting them once they get deployed to your K8s cluster. To seal your secrets you usually use the corresponding command line tool kubeseal and KubeSeal UI wraps it into a web interface.</p> <p></p>"},{"location":"#why-kubeseal-ui","title":"Why KubeSeal UI?","text":"<p>In a simple scenario where you have one K8s cluster with one sealed secrets controller deployed KubeSeal UI just gives you a web interface to seal your secrets. There may be complexer scenarios with one K8s cluster and multiple sealed secret controllers deployed or even a multi cluster environment with one or more sealed secret controllers deployed on each cluster. With KubeSeal UI users of Sealed Secrets don't have to set up the kubeseal command line tool and connections to one or more clusters to seal their secrets. You configure all clusters and available sealed secret controllers in one single place.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#quickstart","title":"Quickstart","text":"<p>Prerequisites:</p> <ul> <li>running and accessible K8s cluster (e.g. kind)</li> <li>Helm installed</li> <li>kubectl installed and configured</li> </ul> <p>Installation:</p> <ol> <li> <p>Install the Helm repositories:</p> <pre><code>helm repo add sealed-secrets https://bitnami-labs.github.io/sealed-secrets\nhelm repo add kubeseal-ui https://br4sk4.github.io/kubeseal-ui/charts\n</code></pre> </li> <li> <p>Deploy Sealed Secrets:</p> <p>For further configuration of Sealed Secrets please refer to the official repository.</p> <pre><code>kubectl create namespace sealed-secrets\nhelm install sealed-secrets sealed-secrets/sealed-secrets -n sealed-secrets\n</code></pre> </li> <li> <p>Deploy KubeSeal UI:</p> <p>For further configuration and more complex scenarios refer to the Getting Started Guide.</p> <pre><code>kubectl create namespace kubeseal-ui\nhelm install kubeseal-ui kubeseal-ui/kubeseal-ui -n kubeseal-ui\n</code></pre> </li> </ol> <p></p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#projects","title":"Projects","text":"<p>KubeSeal UI follows a concept of projects. That means a project refers to a sealed secret controller, which is responsible for managing secrets in one or more namespaces. A project configuration consits of the following attributes:</p> <pre><code>{\n\"name\": \"project-name\",\n\"controllerName\": \"sealed-secrets-controller-name\",\n\"controllerNamespace\": \"sealed-secrets-controller-namespace\"\n}\n</code></pre> <p>Configured projects are picked up by KubeSeal UI and are selectable in the web interface. The following examples will demonstrate two options to configure projects.</p> <p></p>"},{"location":"getting-started/#static-project-configuration","title":"Static Project Configuration","text":"<p>With the static project configuration you configure your projects in the helm values, so they get mounted into the container via a config file.</p> <ol> <li> <p>Deploy Sealed-Secrets with defaults.</p> <pre><code>kubectl create namespace sealed-secrets\nhelm install sealed-secrets sealed-secrets/sealed-secrets -n sealed-secrets\n</code></pre> </li> <li> <p>Create a values.yaml file for KubeSeal UI with a staticly configured project.</p> <pre><code>config:\nstaticProjectConfiguration:\nenabled: true\nprojects:\n- name: \"sealed-secrets\"\ncontrollerName: \"sealed-secrets\"\ncontrollerNamespace: \"sealed-secrets\"\n</code></pre> </li> <li> <p>Deploy KubeSeal UI with the defined values.yaml.</p> <pre><code>kubectl create namespace kubeseal-ui\nhelm install kubeseal-ui kubeseal-ui/kubeseal-ui -n kubeseal-ui -f values.yaml\n</code></pre> </li> </ol> <p></p>"},{"location":"getting-started/#dynamic-project-discovery","title":"Dynamic Project Discovery","text":"<p>With the dynamic project discovery you just need to label/annotate the namespace where the sealed secrets controller is located. KubeSeal UI will periodically search for those namespaces and pick them up into its configuration.</p> <ol> <li> <p>Create a namespace.yaml file with labels and annotations.</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\nname: \"yet-another-ss-controller\"\nlabels:\nkubeseal-ui: \"sealed-secrets\"\nannotations:\nkubeseal-ui/projectName: \"sealed-secrets\"\nkubeseal-ui/controllerName: \"sealed-secrets\"\n</code></pre> </li> <li> <p>Deploy Sealed-Secrets with defaults.</p> <pre><code>kubectl apply -f namespace.yaml\nhelm install sealed-secrets sealed-secrets/sealed-secrets -n sealed-secrets\n</code></pre> </li> <li> <p>Create a values.yaml file for KubeSeal UI with a staticly configured project.</p> <pre><code>config:\nstaticProjectConfiguration:\nenabled: false\ndynamicProjectConfiguration:\nenabled: true\nperiod: 15m\n</code></pre> </li> <li> <p>Deploy KubeSeal UI with the defined values.yaml.</p> <pre><code>kubectl create namespace kubeseal-ui\nhelm install kubeseal-ui kubeseal-ui/kubeseal-ui -n kubeseal-ui -f values.yaml\n</code></pre> </li> </ol> <p></p>"}]}